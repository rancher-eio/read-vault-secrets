---
name: Read Vault Secrets
description: "... it reads secrets from Vault?"
inputs:
  address:
    description: "the address of a deployed vault server"
    required: false
    default: https://vault.rancher.engineering
  secrets:
    description: "the secrets to fetch from the vault server"
    required: false
    default: secret/data/github-actions/test status
outputs:
  vault_data:
    description: "JSON containing the vault secrets"
    value: ${{ steps.create-json.outputs.json }}
# outputs:
#   vault_data:
#     description: "JSON containing the vault secrets"
#     value: ${{ steps.export-json.outputs.json }}    
runs:
  using: composite
  steps:
    - name: Read Secrets from Vault
      uses: hashicorp/vault-action@v3
      id: vault
      with:
        method: jwt
        url: ${{ inputs.address }}
        path: ${{ github.repository_owner }}
        role: ${{ github.event.repository.name }}
        secrets: ${{ inputs.secrets }}
        # outputType: json
        exportEnv: false 
        #exportToken: false

    # - name: Export Vault Outputs as JSON
    #   id: export-json
    #   shell: bash
    #   run: |
    #     secrets_json='{}'
    #     keys=$(echo '${{ toJSON(steps.vault.outputs) }}' | jq -r 'keys[]')
    #       for key in $keys; do
    #         if [[ "$key" != "secrets" && "$key" != "token" ]]; then
    #           value=$(echo '${{ toJSON(steps.vault.outputs) }}' | jq -r --arg k "$key" '.[$k]')
    #           echo "Processing secret: $key"
    #           echo "::add-mask::$value"
    #           secrets_json=$(echo "$secrets_json" | jq --arg k "$key" --arg v "$value" '. + {($k): $v}')
    #         fi
    #       done
    #       echo "json=${secrets_json}" >> $GITHUB_OUTPUT
    #       echo "Final secrets JSON structure:"
    #       echo "$secrets_json" | jq 'keys'
          
        
    - name: Create JSON Output
      id: create-json
      shell: bash
      run: |
        SECRET_NAMES=()
        while IFS= read -r line || [[ -n "$line" ]]; do
          if [ -z "$line" ]; then
            continue
          fi
          if [[ "$line" == *"|"* ]]; then
            name=$(echo "$line" | cut -d '|' -f 2 | xargs)
            SECRET_NAMES+=("$name")
          else
            name=$(basename "$line" | tr '[:lower:]' '[:upper:]' | tr ' ' '_')
            SECRET_NAMES+=("$name")
          fi
        done <<< "${{ inputs.secrets }}"
        
        JSON="{"
        FIRST=true
        for name in "${SECRET_NAMES[@]}"; do
          value="${!name}"
          if [ -n "$value" ]; then
            # Mask the value
            echo "::add-mask::$value"
            if [ "$FIRST" = "true" ]; then
              FIRST=false
            else
              JSON="${JSON},"
            fi
            escaped_value=$(echo "$value" | sed 's/"/\\"/g')
            JSON="${JSON}\"$name\":\"$escaped_value\""
            unset "$name"
          fi
        done
        JSON="${JSON}}"
        echo "json=$JSON" >> $GITHUB_OUTPUT
        
    - name: validate JSON Access
      id: validate
      shell: bash
      run: |
        echo "Testing JSON extraction..."
        SECRETS_JSON='${{ steps.vault.outputs.secrets }}'
        echo "$SECRETS_JSON" | jq empty || (echo "‚ùå Invalid JSON"; exit 1)
        FIRST_KEY=$(echo "$SECRETS_JSON" | jq -r 'keys[0]')
        echo "First secret key: $FIRST_KEY"
        
    - name: Debug Vault Output
      shell: bash
      run: |
        echo "Vault output format check:"
        echo "Verify that PROOF_OF_CONCEPT: ${{ steps.create-json.outputs.PROOF_OF_CONCEPT != '' }}
