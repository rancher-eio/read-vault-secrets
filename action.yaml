---
name: Read Vault Secrets
description: "... it reads secrets from Vault?"
inputs:
  address:
    description: "the address of a deployed vault server"
    required: false
    default: https://vault.rancher.engineering
  secrets:
    description: "the secrets to fetch from the vault server"
    required: false
    default: secret/data/github-actions/test status
outputs:
  secret_values:
    description: "JSON object containing the retrieved secrets"
    value: ${{ steps.vault.outputs.secrets }}
# outputs:
#   PROOF_OF_CONCEPT:
#     description: "the secret fetched from vault"
#     value: ${{ steps.vault.outputs.PROOF_OF_CONCEPT }}
runs:
  using: composite
  steps:
    - name: Read Secrets from Vault
      uses: hashicorp/vault-action@v3
      id: vault
      with:
        method: jwt
        url: ${{ inputs.address }}
        path: ${{ github.repository_owner }}
        role: ${{ github.event.repository.name }}
        secrets: ${{ inputs.secrets }}
        # outputType: json
        
    - name: Debug Vault Output
      shell: bash
      run: |
        echo "Vault output format check:"
        echo "Has 'secrets' output: ${{ steps.vault.outputs.secrets != '' }}"
        echo "Verify that PROOF_OF_CONCEPT: ${{ steps.vault.outputs.PROOF_OF_CONCEPT != '' }}"
        
    - name: Export Specific Secrets to Environment and as Outputs
      id: set-outputs
      shell: bash
      run: |
        if [ -n "${{ steps.vault.outputs.PROOF_OF_CONCEPT }}" ]; then
          echo "Using direct access to outputs"
          echo "PROOF_OF_CONCEPT=${{ steps.vault.outputs.PROOF_OF_CONCEPT }}" >> $GITHUB_OUTPUT
        elif [ -n "${{ steps.vault.outputs.secrets }}" ]; then
          echo "Parsing secrets JSON"
          echo '${{ steps.vault.outputs.secrets }}' | jq -r 'to_entries[] | "echo \""+.key+"="+.value+"\" >> $GITHUB_OUTPUT"' | bash
        else
          echo "No outputs found from vault action"
          exit 1
        fi
      # env:
      #   SECRETS_JSON: ${{ steps.vault.outputs.secrets }}
      # run: |
      #   echo "$SECRETS_JSON" | jq -r 'to_entries | .[] | "echo \"::add-mask::"+.value+"\""' | bash
      #   echo "$SECRETS_JSON" | jq -r 'to_entries | .[] | "echo \""+.key+"="+.value+"\" >> $GITHUB_OUTPUT"' | bash
      #   echo "$SECRETS_JSON" | jq -r 'to_entries | .[] | "echo \""+.key+"="+.value+"\" >> $GITHUB_ENV"' | bash
      
