---
name: Read Vault Secrets
description: "... it reads secrets from Vault?"
inputs:
  address:
    description: "the address of a deployed vault server"
    required: false
    default: https://vault.rancher.engineering
  secrets:
    description: "the secrets to fetch from the vault server"
    required: false
    default: secret/data/github-actions/test status
outputs:
  vault_data:
    description: "JSON containing the vault secrets"
    value: ${{ steps.vault.outputs.data }}
    #value: ${{ steps.create-json.outputs.json }}
    
runs:
  using: composite
  steps:
    - name: Read Secrets from Vault
      uses: hashicorp/vault-action@v3
      id: vault
      with:
        method: jwt
        url: ${{ inputs.address }}
        path: ${{ github.repository_owner }}
        role: ${{ github.event.repository.name }}
        secrets: ${{ inputs.secrets }}
        exportEnv: false 
        exportToken: false
           
    - name: Create JSON Output
      id: create-json
      shell: bash
      env:
        VAULT_DATA: ${{ steps.vault.outputs.data }}
        SECRETS_INPUT: ${{ inputs.secrets }}
      run: |
        JSON="{"
        FIRST=true
        while IFS= read -r line || [[ -n "$line" ]]; do
          if [ -z "$line" ]; then
            continue
          fi
          path="${line%%#*}"
          key="${line##*#}"
          if [ "$path" = "$line" ]; then
            key="value"  # No # found, use default key
          fi
          value=$(echo "$VAULT_DATA" | jq -r --arg path "$path" --arg key "$key" '.[$path][$key] // empty')
          if [ -z "$value" ]; then
            echo "❌ Secret not found: $path#$key"
            exit 1
          fi
          echo "::add-mask::$value"

          if [ "$FIRST" = "true" ]; then
            FIRST=false
          else
            JSON="${JSON},"
          fi
          escaped_value=$(echo "$value" | sed 's/"/\\"/g')
          JSON="${JSON}\"${key}\":\"${escaped_value}\""
        done <<< "$SECRETS_INPUT"

        JSON="${JSON}}"
        echo "json=$JSON" >> $GITHUB_OUTPUT
        
    - name: validate JSON Values
      id: validate
      shell: bash
      run: |
        echo "testing JSON extraction..."
        JSON_VALUE='${{ steps.create-json.outputs.json }}'
        echo "JSON keys: $(echo "$JSON_VALUE" | jq 'keys')"
        
        if echo "$JSON_VALUE" | jq -e '. == {}' > /dev/null; then
          echo "❌ No secrets found in JSON output"
          exit 1
        else
          echo "✅ JSON validation successful"
        fi
        
    - name: Debug Vault Output
      shell: bash
      run: |
        echo "Vault output format check:"
        echo "Verify that PROOF_OF_CONCEPT: ${{ steps.create-json.outputs.PROOF_OF_CONCEPT != '' }}"
            
